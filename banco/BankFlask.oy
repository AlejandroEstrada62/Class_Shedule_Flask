from flask import Flask, render_template, redirect, url_for, flash, request
app = Flask (__name__)
app.secret_key='supersecretkey'

class Account:
    def __init__(self, name:str, initial_balance:float):
        self.name = name
        self.transaction = [f'cuenta creada con saldo inicial de {initial_balance}']
        self.balance = initial_balance
        
        
    def deposit(self, amount):
        if amount >0:
            self.balance += amount
            self.transaction.append(f'deposito: ${amount}')
        
    def withdraw(self, amount):
        if self.balance >= amount and amount > 0:
            self.balance -= amount
            self.transaction.append(f'retiro: -${amount:.2f}')
        else:
            flash(f'fondos insuficiente o cantidad invalida')
    
    def check_balance(self):
       return self.transaction
   
class Bank:
    def __init__(self):
        self.accounts = {}
    def create_account(self, name, initial_balance):
        if name in self.accounts:
            flash ('la cuenta ya existe')
        else:
            self. accounts[name]= Account(name, initial_balance)
            flash (f'cuenta creada')
   
   
    def transferencia(self, from_account, to_account, amount):
        if from_account in self.accounts and to_account in self.accounts:
            if self.accounts[from_account].balance >= amount and amount >0:
                self.accounts[from_account].withdraw(amount)
                self.accounts[to_account].deposit(amount)
                flash (f'transeferir a{amount} de {from_account} a {to_account}')
        else:
            flash('la cuenta no existe')
        
    
bank = Bank ()

@app.route('/')
def index():
    return render_template('inicio.html')
@app.route('/create_account', methods=['GET','POST'])
def create_account():
    if request.method=='POST':
        account = request.form['name']
        amount = float(request.form['initial_balance'])
        if account in bank.accounts:
            flash ('la cuenta ya existe')
        else:
            bank.create_account(account, amount)
        return redirect (url_for('index'))
    return render_template('create_account.html')


@app.route('/withdraw', methods=['GET','POST'])
def withdraw():
    if request.method=='POST':
        account = request.form['account']
        amount = float (request.form['amount'])
        if account in bank.accounts:
            bank.accounts[account].withdraw(amount)
            flash (f'se ha retirado {amount}de {account}')
        else:
            flash('la cuenta no existe')
        return redirect (url_for('index'))
    return render_template('withdraw.html')

@app.route('/deposit', methods=['GET','POST'])
def deposit():
    if request.method=='POST':
        account = request.form['account']
        amount = float (request.form['amount'])
        if account in bank.accounts:
            bank.accounts[account].deposit(amount)
            flash (f'se ha depositado {amount} en la cuentra {account}')
        else:
            flash('la cuenta no existe')
        return redirect (url_for('index'))
    return render_template('deposit.html')

@app.route('/transferencia', methods=['GET','POST'])
def transfer():
    if request.method=='POST':
        from_account= request.form['from_account']
        to_account = request.form['to_account']
        amount= float(request.form['amount'])
        if from_account in bank.accounts and to_account in bank.accounts:
            bank.transferencia(from_account, to_account, amount)
        return redirect (url_for('index'))
    return render_template('transfer.html')

@app.route('/check_balance', methods=['GET','POST'])
def check_balance():
    if request.method=='POST':
        account= request.form['from_account']
        if account in bank.accounts:
            balance = bank.accounts[account].check_balance()
            flash (f'transeferir a{account.name}: -${account:.2f}')
        else:
            flash('la cuenta no existe')
        return redirect (url_for('index'))
    return render_template('check_balance.html')

@app.route('/generate_statement', methods=['GET','POST'])
def generate_statement():
    if request.method=='POST':
        account= request.form['from_account']
        if account in bank.accounts:
            movimiento = bank.accounts[account].generate_statement()
            return render_template('statement.html',movimiento=movimiento, account=account)
        else:
            flash('la cuenta no existe')
        return redirect (url_for('index'))
    return render_template('check_balance.html')

if __name__=='__main__':
    app.run(debug=True)